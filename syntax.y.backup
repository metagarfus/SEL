%{
#include <stdio.h>
#include <stdlib.h>
#include "tagtuple.h"
#include "utils.h"
#include "syntax.h"

typedef struct {
    int current_line;
    int lines_read;
    int interactive;
    FILE *stream;
    char last_read_char[2];
    parse_output output;
} state;

struct {state state;} __yy, *yy = &__yy;

#define YY_INPUT(yy, buf, result, max_size)             \
  {                                                     \
    int yyc= getc(yy->state.stream);                    \
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);        \
    yy->state.lines_read += yyc == '\n'                 \
    yyprintf((stderr, "<%c>", yyc));                    \
    yy->state.last_read_char[0] = yyc;                  \
  }

static parse_result result(tag_tuple * tag_tuple) {
    parse_result result = {0};
    result.line = tag_tuple != NULL ? tag_tuple->line_number : -1;
    result.value.tag_tuple = tag_tuple;
    return result;
}

static tag_tuple *result_arg_list(tag_tuple *head, tag_tuple * previous_head) {
    if (head != NULL)
        head->next = previous_head;
    else
        head = previous_head;
    return head;
}

static parse_result result_mapping(mapping_t * mapping) {
    parse_result result;
    result.line = mapping != NULL ? mapping->line_number : -1;
    result.value.mapping = mapping;
    return result;
}

static parse_result result_maps_list(mapping_t *head, mapping_t * previous_head ) {
    if (head != NULL)
        head->next = previous_head;
    else
        head = previous_head;
    return head;
}

static parse_result result_declaration(declaration_t * declaration) {
    parse_result result;
    result.line = declaration != NULL ? declaration->line_number : -1;
    result.value.declaration = declaration;
    return result;
}

static declaration_t * result_decl_list(declaration_t *head, declaration_t * previous_head) {
    if (head != NULL)
        head->next = previous_head;
    else
        head = previous_head;
    return head;
}

static parse_result result_access_path(access_path_t *access_path) {
    parse_result result;
    result.line = access_path != NULL ? access_path->line_number : -1;
    result.value.access_path = access_path;
    return result;
}

static parse_result result_access_path_list(access_path_t *head, access_path_t * previous_head ) {
    if (head != NULL)
        head->next = previous_head;
    else
        head = previous_head;
    return head;
}

static parse_result result_datatype(value_data_type_t * data_type) {
    parse_result result;
    result.line = data_type != NULL ? data_type->line_number : -1;
    result.value.data_type = data_type;
    return result;
}

static parse_result result_text(int line, char *text) {
    parse_result result;
    result.line = line;
    result.value.text = clone_string(text);
    return result;
}

static parse_result result_line(state *state) {
    parse_result result;
    result.line = state->current_line;
    result.value.tag_tuple = NULL;
    result.value.text = NULL;
    return result;
}

static void error(state *state, parse_error_code code, operation op, char *text) {
    if (state->output.error_code != PARSE_ERROR_OK)
        return; 
    tag_tuple * const root = state->output.error_code == PARSE_ERROR_OK ? state->output.value.root : NULL;
    state->output.error_code = code; 
    state->output.value.error.op = op;
    if (text != NULL) {
        int len = sizeof(state->output.value.error.text) - 1;
        strncpy(state->output.value.error.text, text, len);
        state->output.value.error.text[len] = '\0';
    } else {
        state->output.value.error.text[0] = '\0';
    }
    state->output.value.error.line = state->lines_read + 1;
    state->output.value.error.leftover = root;
    if (root != NULL)
        fprintf(stderr, "LEFTOVER\n");
}

static void output(state *state, tag_tuple * root) {
    if (state->output.error_code == PARSE_ERROR_OK)
        release_tagtuple(state->output.value.root);
    else     
        release_tagtuple(state->output.value.error.leftover);
    state->output.error_code = PARSE_ERROR_OK;
    state->output.value.root = root;
}
#define WHITE_SPACE(X) ((X) == ' ' || (X) == '\t' || (X) == '\r' || (X) == '\n')

static void unexpexted_character_error(state *state, char *buf, int pos, int len) {
  // if (pos > 0 && pos < len && !WHITE_SPACE(buf[pos - 1]))  
  //      state->last_read_char[0] = buf[pos - 1];
    if (state->last_read_char[0] <= 0)
        error(state, PARSE_ERROR_END_OF_INPUT, 0, "");    
    else
        error(state, PARSE_ERROR_UNEXPECTED_CHAR, 0, state->last_read_char);
}

%}
%token <double_value> DOUBLE_VALUE    
%token <integer_value> INTEGER         
%token <string_value> TAG             
%token <string_value> STRING
%type <tag_tuple *> Definitions
%type <tag_tuple *> Definition
%type <tag_tuple *> Function
%type <tag_tuple *> FunctionList
%type <tag_tuple *> Expr
%type <tag_tuple *> ExpOp
%type <tag_tuple *> Access
%type <tag_tuple *> Value
%type <tag_tuple *> Arguments
%type <tag_tuple *> ArgList

%type <access_path_t *> AccessPathList
%type <access_path_t *> AccessPath
%type <access_path_t *> TAG_OR_EMPTY

%type <data_type *> ArrowType
%type <data_type *> ArrayType
%type <data_type *> PointerType
%type <data_type *> SimpleType

%type <declaration *> VarDeclaration
%type <declaration *> VarDeclarationList
%type <declaration *> VarDeclarations

%type <mapping_t *> Mapping
%type <mapping_t *> MapsList

%token   
PLUS            
MINUS           
TIMES           
DIVIDE          
OPEN            
CLOSE           
COLON           
ASSIGN          
EQUALS          
OPEN_S_BRACKET  
CLOSE_S_BRACKET 
OPEN_BRACKET    
CLOSE_BRACKET   
INCLUDE         
DATATYPE        
WITH            
FUNCTION        
PROTOTYPE       
EXTERNAL        
ARROW           
BYTE            
INT             
LONG            
DOUBLE          
CHARS           
ARRAY           
BOX             
UNBOX           
OF              
DYNAMIC         
APPLY           
IN              
LET             
FOR             
FOREACH         
FROM            
WHILE           
IF              
THEN            
ELSE            
CARDINAL        
DOLLAR          
NEW             
TYPEDEF         
COMMA           
AMPERSAND       
AND             
OR              
LTE             
GTE             
LT              
GT              
EQ              
NOT             
DOT             
IS              
STATIC          
QUOTES

%left AND OR
%left LTE GTE GT LT EQ
%left PLUS MINUS
%left TIMES DIVIDE

%union {
        tag_tuple * tag_tuple;
        value_data_type_t *data_type;
        mapping_t *mapping;
        declaration_t *declaration;
        char *text;
        access_path_t *access_path;
    };
%start Stmt
%%
Stmt    :  Definitions         { output(&yy->state, make_definitions(@1.first_line, $1.line_number, $1)); }


Definitions : Definition Definitions                                     { $$ = result_arg_list($1, &2);}
            | Definition                                                 { $$ = result_arg_list($1, &2);}

Definition : Function                                                    { $$ = $1;  } 
            /*| INCLUDE STRING                                             { $$ = make_include(@1.first_line, $2);  } 
            | TYPEDEF TAG ArrayType                                      { $$ = make_typedef(@1.first_line, $2, 1, $3);  }
            | TYPEDEF TAG                                                { $$ = make_typedef(@1.first_line, $2, 1, NULL);  }
            | STATIC VarDeclaration EQUALS Expr                          { $$ = make_static(@1.first_line, $2, $4, NULL);  }  
            | DATATYPE TAG ArrowType OPEN VarDeclarations CLOSE Expr 
                   WITH OPEN FunctionList CLOSE                          { $$ = make_datatype(@1.first_line, $2, 1, $3, $5, $7, $10);  }*/

Function : FUNCTION VarDeclaration OPEN VarDeclarations CLOSE Expr       { $$ = make_function(@1.first_line, $2, $4, $6);  } 
       //  | PROTOTYPE VarDeclaration OPEN VarDeclarations CLOSE           { $$ = make_function(@1.first_line, $2, $4, NULL);  }

FunctionList : Function FunctionList                                     { $$ = result_arg_list($1, &2);}
             | Function                                                  { $$ = result_arg_list($1, &2);}

ArrowType   : PointerType ARROW ArrowType                                { $$ = make_arrow_type(@1.first_line, $1, $3); }
            | PointerType                                                { $$ = $1; }

PointerType : TIMES ArrayType                                            { $$ = make_pointer_type(@1.first_line, $2); }
            | TIMES SimpleType OPEN_S_BRACKET CLOSE_S_BRACKET            { $$ = make_array_pointer_type(@1.first_line, $2); }
            | ArrayType                                                  { $$ = $1; }

ArrayType   : SimpleType OPEN_S_BRACKET INTEGER CLOSE_S_BRACKET          { $$ = make_array_type(@1.first_line, $1, $3);}
            | SimpleType                                                 { $$ = $1; }

SimpleType : BYTE                                                 { $$ = make_byte_type(@1.first_line); }
           | INT                                                  { $$ = make_int_type(@1.first_line); }
           | LONG                                                 { $$ = make_long_type(@1.first_line); }
           | DOUBLE                                               { $$ = make_double_type(@1.first_line); }
           | OPEN_BRACKET VarDeclarationList CLOSE_BRACKET        { $$ = make_record_type(@1.first_line, $2); }
           | BOX                                                  { $$ = make_box_type(@1.first_line, NULL); }
           | BOX SimpleType OPEN_S_BRACKET CLOSE_S_BRACKET        { $$ = make_array_box_type(@1.first_line, $2); }
           | BOX SimpleType                                       { $$ = make_box_type(@1.first_line, $2); }
           | DYNAMIC                                              { $$ = make_dynamic_type(@1.first_line); }
           | CHARS                                                { $$ = make_chars_type(@1.first_line); }
           | TAG                                                  { $$ = make_named_type(@1.first_line, $1, 1); }
           | OPEN ArrowType CLOSE                                 { $$ = $2 }

VarDeclarations : VarDeclarationList                              { $$ = $1; }
                |                                                 { $$ = result_decl_list(NULL, NULL);}

VarDeclarationList : VarDeclaration COMMA VarDeclarationList      { $$ = result_decl_list($1, $3);}
                   | VarDeclaration                               { $$ = result_decl_list($1, NULL);}

VarDeclaration : TAG COLON ArrowType                              {$$ = make_declaration(@1.first_line, $1, 1, $3);}       
               | TAG                                              {$$ = make_declaration(@1.first_line, $1, 1, NULL);}       

Expr  : /*Access ASSIGN ExpOp                                           { $$ = make_assign(@1.first_line, $1, $3); } 
      | ExpOp COLON ArrowType                                         { $$ = make_convert(@1.first_line, $1, $3); }
      | ExpOp IS ArrowType                                            { $$ = make_is(@1.first_line, $1, $3); }
      | LET MapsList IN ExpOp                                         {$$ = $4;}//{ $$ = result(make_let(l.line, v.value.declaration, i.value.tag_tuple,e.value.tag_tuple)); } 
      | STATIC VarDeclaration EQUALS Expr IN ExpOp                    { $$ = make_static(@1.first_line, $2, $4, $6); }
      | IF Expr THEN Expr ELSE ExpOp                                  { $$ = make_if(@1.first_line, $2, $4, $6); }                                                                                        
      | FOR VarDeclaration EQUALS Expr COMMA Expr COMMA Expr IN ExpOp { $$ = make_for(@1.first_line, $2, $4, $6, $8, $10); }
      | FOREACH VarDeclaration FROM Expr IN ExpOp                     { $$ = make_foreach(@1.first_line, $2, $4, $6; } 
      | WHILE Expr IN ExpOp                                           { $$ = make_while(@1.first_line, $2, $4); }
      | */ExpOp                                                         { $$ = $1; }

ExpOp : /*ExpOp AND ExpOp                                             { l = make_exp(@1.first_line, OP_ADD, $1, $3); }
      | ExpOp OR ExpOp                                              { l = make_exp(@1.first_line, OP_SUB, $1, $3); }
      | ExpOp LTE ExpOp                                             { l = make_exp(@1.first_line, OP_LTE, $1, $3); }
      | ExpOp GTE ExpOp                                             { l = make_exp(@1.first_line, OP_GTE, $1, $3); }
      | ExpOp LT ExpOp                                              { l = make_exp(@1.first_line, OP_LT, $1, $3); }
      | ExpOp GT ExpOp                                              { l = make_exp(@1.first_line, OP_GT, $1, $3); }
      | ExpOp EQ ExpOp                                              { l = make_exp(@1.first_line, OP_EQ, $1, $3); }
      | ExpOp PLUS ExpOp                                            { l = make_exp(@1.first_line, OP_ADD, $1, $3); }
      | ExpOp MINUS ExpOp                                           { l = make_exp(@1.first_line, OP_SUB, $1, $3); }
      | ExpOp TIMES ExpOp                                           { l = make_exp(@1.first_line, OP_MUL, $1, $3);  }
      | ExpOp DIVIDE ExpOp                                          { l = make_exp(@1.first_line, OP_DIV, $1, $3);  }
      | */Access                                                      { $$ = $1; }

Access : Value AccessPathList                                       { $$ = make_access(@1.first_line, $1, $2); }
       | Value                                                      { $$ = $1 }

AccessPathList : AccessPath AccessPathList                          { $$ = result_access_path_list($1, $2);}
               | AccessPath                                         { $$ = result_access_path_list($1, NULL);}

AccessPath : DOT TAG                                                { $$ = make_record_access_path(@1.first_line, $2, 1); }
           | OPEN_S_BRACKET Expr CLOSE_S_BRACKET                    { $$ = make_array_access_path(@1.first_line, $2); }

Value : NOT Value                                                 { $$ = make_unary_exp(@1.first_line, OP_NOT, $2); }
      | PLUS Value                                                { $$ = make_unary_exp(@1.first_line, OP_PLUS, $2); }
      | MINUS Value                                               { $$ = make_unary_exp(@1.first_line, OP_MINUS, $2); }
      | TIMES Value                                               { $$ = make_unary_exp(@1.first_line, OP_DEREF, $2); }
      | AMPERSAND Value                                           { $$ = make_unary_exp(@1.first_line, OP_REF, $2); }
      | CARDINAL Value                                            { $$ = make_unary_exp(@1.first_line, OP_LEN, $2); }
      | DOLLAR Value                                              { $$ = make_unary_exp(@1.first_line, OP_FREF, $2); }
      | BOX Value                                                 { $$ = make_unary_exp(@1.first_line, OP_BOX, $2); }
      | UNBOX Value                                               { $$ = make_unary_exp(@1.first_line, OP_UNBOX, $2); }
      | DOUBLE_VALUE                                              { $$ = make_double(@1.first_line, $1); }
      | INTEGER                                                   { $$ = make_long(@1.first_line, $1); }
      | STRING                                                    { $$ = make_string(@1.first_line, $1); }
      /*| BOX Expr OF OPEN TAG IN Expr CLOSE                        { $$ = make_box_of(@1.first_line, $2, $5, 1, $7); }
      | ARRAY Expr OF OPEN TAG IN Expr CLOSE                      { $$ = make_mut_array_of(@1.first_line, $2, $5, 1, $7); }
      | OPEN_S_BRACKET INTEGER OF TAG IN Expr CLOSE_S_BRACKET     { $$ = make_array_of(@1.first_line, $2, $4, 1, $6); }
      | NEW ArrowType OPEN Arguments CLOSE                        { $$ = make_new(@1.first_line, $2, $4); }                                                                   
      | OPEN_BRACKET VarDeclarationList APPLY Expr CLOSE_BRACKET  { $$ = make_lambda(@1.first_line, $2, $4); }
      | OPEN_S_BRACKET Arguments CLOSE_S_BRACKET                  { $$ = make_array(@1.first_line, $2); }        
      | OPEN_BRACKET MapsList CLOSE_BRACKET                       { $$ = make_record(@1.first_line, $2); }        
      | TAG OPEN Arguments CLOSE                         { $$ = make_tuple(@1.first_line, $1, 1, $3); }*/
      | TAG                                                       { $$ = make_tag(@1.first_line, $1, 1); }
                                                                  

TAG_OR_EMPTY : TAG                                                { $$ = $1; } 
             |                                                    { $$ = NULL; }

//StaticDeclaration : STATIC VarDeclaration EQUALS Expr IN Value

Arguments : ArgList                  { $$ = $1; }
          |                          { $$ = result_arg_list(NULL, NULL);}

ArgList : Expr COMMA ArgList         { $$ = result_arg_list($1, $3);}
        | Expr                       { $$ = result_arg_list($1, NULL);}

Mapping : VarDeclaration EQUALS Expr {$$ = make_mapping(@1.first_line, $1, $3);}

MapsList : Mapping COMMA MapsList    { $$ = result_maps_list($1, $3);}
         | Mapping                   { $$ = result_maps_list($1, NULL);}
       

%%

static void init_iteractive_state(state *state) {
    state->interactive = 1;
    state->stream = stdin;
}

void tagtuple_interactive(void (*run)(parse_output output)) {
    if (run == NULL)
        return;
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    init_iteractive_state(&ctx.state);
    while (yyparse(&ctx)) {
        const parse_output output = ctx.state.output;
        run(output);
        if (feof(ctx.state.stream))
            break;
        memset(&ctx.state, 0, sizeof(state));
        init_iteractive_state(&ctx.state);
    }
    yyrelease(&ctx);
}

parse_output tagtuple_parse(FILE *stream) {
    yycontext ctx;
    memset(&ctx, 0, sizeof(yycontext));
    ctx.state.interactive = 0;
    ctx.state.stream = stream;
    yyparse(&ctx);
    const parse_output output = ctx.state.output;
    yyrelease(&ctx);
    return output;
}
